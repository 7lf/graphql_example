/* jshint esversion: 8*/

import typeDefs from './schema.js';
import resolvers from './resolvers.js';
import db from './db';

import express from 'express';
import { ApolloServer } from 'apollo-server-express';
import passport from 'passport';
import passportJWT from 'passport-jwt';
const { Strategy, ExtractJwt } = passportJWT;

const gql = require('graphql-tag'); // –Ω–∞–¥–æ —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞

const bodyParser = require('body-parser');

const config = require ('config');
const port = config.port;
const params = {
  secretOrKey: config.secret,
  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken() 
  /* —á—Ç–æ–±—ã —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—ã–ª–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∞
  authorization Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ0ZXN0QHRlc3QucnUyIiwicGFzc3dvcmQiOiIkMmIkMDQkRG81SW82emNUU0NkaEU1emV0RGljT2RKVVdzS25iUU9DWXVmQi92bHpqeWVDM1FTNFdnZFMiLCJuYW1lIjoidGVzdGVyIiwiY3JlYXRlZEF0IjoiMjAyMC0xMC0xM1QwNjo0ODoxMC4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMC0xMC0xM1QwNjo0ODoxMC4wMDBaIiwic3RhdHVzIjoib2siLCJpYXQiOjE2MDI1ODg0MjB9.yZ9bOQX5nIT2kvysQkTglWrKiFcuNuF6OXHj5RZgb_E
  ^^^^^^^^^^^^^ ^^^^^^                  ^^^^^^^
  –Ω–∞–∑–≤–∞–Ω–∏–µ      –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å      –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
  */
  //–¥—Ä—É–≥–æ–π —Ç–∏–ø: jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('JWT')
};

const app = express();
app.use(express.json());
//-------------------------------------------------------------------
const strategy = new Strategy(params, async (payload, done) => {
  let user = await db.getUser(payload);
  
  if (user[0].status === 'error') {
    user = [];
  }
  
  return done(null, user);
});
//-------------------------------------------------------------------
passport.use(strategy);
passport.initialize();
//-------------------------------------------------------------------
const server = new ApolloServer({ 
  typeDefs, resolvers,
  context : req => ({
    req
  })
});
//-------------------------------------------------------------------
app.use('/graphql', (req, res, next) => {
  const query = req.body.query;
  const obj = gql`${query}`;
  if ((obj.definitions[0].operation !== 'mutation') && (obj.definitions[0].selectionSet.selections[0].name.value !== 'loginUser')) { // || (obj.definitions[0].selectionSet.selections[0].name.value !== 'registerUser')) {
    passport.authenticate('jwt', { session: false }, async (err, user, info) => { // –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–ø—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞—Ä–æ—Å–∞
      console.log('====', err, user, info);
      if (user === false) {
        req.error = 'User not found!';
        req.user = [];
      }

    })(req, res, next);
  }
  next();
});
//-------------------------------------------------------------------
server.applyMiddleware({
  app
});
//-------------------------------------------------------------------
const main = async () => {
  db.connect().then( result => {
    if (result.status === 'error') {
      console.error('[error] ', result.data);
      process.exit(1);
    } else {
      app.listen({
        port: port
      },
      () => {
        console.log(`üöÄ Example server ready. Port:`, port);
      });
    }
  });
};
//-------------------------------------------------------------------
main();

/*
–ü—Ä–∏–º–µ—Ä—ã:

–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
mutation {
  loginUser(data: {email: "test@test.ru2", password: "123456"}) {
    token
    error
  }
}

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:
query {
  Authors (filter:{id:1}) {
    name_en
    name_ru
    id
  }
}

–§–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –ø–æ id = 1. –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ–±—ã –∏—Å–∫–∞–ª –ø–æ –ª—é–±–æ–º—É –ø–æ–ª—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, name_en.

eyJhbGciOiJIUzI1NiJ9.b2s._gOMH_ffHySGsjow7F5ZlVb8RFbsAKopN8s9ux_P3DI

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
mutation {
  signupUser (data:{
    email: "test@test.ru"
    password: "password"
    name: "tester"
  })
  {
    token
  }
}

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π
query {
  Users(filter:{ email:""})
  {
    email
  }
}
  –ó–∞–≥–æ–ª–æ–≤–æ–∫:
{
  "Authorisation": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiZW1haWwiOiJ0ZXN0QHRlc3QucnUyIiwicGFzc3dvcmQiOiIkMmIkMDQkejBJOGdDdDl5MER6L0FvL2RpMWZOdXpQclV6TEdqVjMuYldLYnRBNDBHV0RjWnBQNkg2bGEiLCJuYW1lIjoidGVzdGVyIiwiY3JlYXRlZEF0IjoiMjAyMC0xMC0wNlQxODoxMDoyNC4wMDBaIiwidXBkYXRlZEF0IjoiMjAyMC0xMC0wNlQxODoxMDoyNC4wMDBaIiwiaWF0IjoxNjAyMDYyODMwfQ.gxZsZlmjYmUaIFcm7p_KMzr874B61FrGTURAwYrpuJs"
}

*/